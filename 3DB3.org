#+BRAIN_PARENTS: school

#+TITLE: 3DB3: Databases
#+AUTHOR: Omar Alkersh
#+SETUPFILE: ./theme-readtheorg.setup

#+begin_quote
These notes follow /Raghu Ramakrishnan, Johannes Gehrke - Database Management Systems (2003)/ and thus will contain material directly from it.
#+end_quote
* Overview of DBMS

  Databases are systems that are responsible for managing data. While their data is still stored on secondary storage devices, they differ form regular “flat” flat files. For starters, they are not flat! The data is usually stored in some sort of tree structure for efficiency and speed. The structure is specialised for whatever *DBMS[fn:1]* is handling the file. While maintaining speed and efficiency, the DBMS must ensure the following properties:
  * *Concurrency*: multiple users can access the database simultaneously, while allowing the database designer to code it as if all transactions are done serially, not in parallel. As with any concurrent system that relies on some global state, this relies on a locking mechanism that stops multiple from altering the same data simultaneously to avoid data corruption or incorrect results.
  * *Maintain Data Integrity*: The goes for both the physical data and any constrictions the designer put on the data fields.
    * /physical Data/: The DBMS should be able to recover from a failed or an incomplete transaction. It does this by registering the transaction in the log *before* it is executed. In essence, all transactions are /atomic/. Meaning they are either successful or not successful. There are no partial transactions.
    * /Constraints/: These are data constraints. They define the domain of each field and whether the data is valid or not. They define the data type for the field and its properties. This can be some variable function or a constant one. Example, it can check if the new purchase or money allocation goes over the total budget for the project or simply check if a number is positive. It is responsible for cancelling the transaction and informing the user of the failure.
  * *Queries*: A DBMS should be able to run queries and answer questions about the database. Questions can be about the average salary in some faculty, the number of people who are born after a certain data, the shortest person, etc. Queries select and return entries/entities which satisfies certain properties. These queries can be over multiple tables and they are able to join records/entities depending on the command specified.


  Some important takes:
  1. Every object that is being read or written to is locked in either 'shared' or 'exclusive' mode respectively to ensure data integrity.
     * Shared lock allows reading but not writing by other processes, while an exclusive stops other processes from accessing the resource completely.
  2. A DBMS must be able to selectively force a collection of pages from the memory to storage. Some OS support is not satisfactory.
  3. Periodic checkpoints can make crash recovery easier and faster. But check pointing often slows down normal execution. So some balance is necessary.

** Structure of a DBMS

   The DBMS has at the top /Views/ as the interface. The exact format of the view depends heavily on the application. This can be a GUI or a CLI. The /View/ is responsible for providing the SQL commands/statements to the DBMS.

   Following is the /Query Evaluation Engine/. This takes the statements and prepares it for execution. The statement is first /parsed/ then potentially optimised for faster execution. Then it is turned to the /plan executor/, this is normally in the form of a tree of relational [[Relational Algebra][operators]]. These serve as the building blocks for any transaction.

   Then comes the /method layer/. This is where the concept of *file* is defined. In a DBMS, a file is usually collection of pages[fn:2] or records. *Heap* files, or unordered files are also supported. This is where the relevant page information is stored for requesting read and write.

   This sends requests to the /buffer manager/. This is where the pages are actually requested. It loads pages from storage to the memory as needed.

   Lowest but not last is /disk space manager/. You guessed it! It manages how the DBMS uses space on the disk. The higher layers use methods provided by this layer to allocate, deallocate, read, and write pages.

   To its side comes the /transaction manager/ and the /lock manager/. The former makes sure that the correct lock is applied by each transaction. A query only applies a shared lock, etc. While the /lock manager/ keeps track of all the locks.

   Lastly is the /recovery manager/. Recall that the DBMS keeps a log of all transactions. This module is what handles the logs and is also responsible for recovery after a system crash.

   The /buffer manager/ and the /disk space manager/ are what interacts with these modules.

   :TODO: Insert a diagram for the system.
** Levels of Abstraction in a DBMS

   There are 3 abstraction level to any DBMS; [[Physical Schema]], [[Conceptual Schema]], and [[External Schema]].
*** Conceptual Schema
    Sometimes called the /logical schema/, the conceptual schema describes the stored data in terms of the data model of the DBMS. In a relational DBMS, it describes all the relations and entities in the database. The example the book makes are students in a university; the students and courses are entities and the enrolment is stored as a relation.

    #+CAPTION: Conceptual Schema example for students and courses
    #+begin_quote
    Students(/sid:/ *string*, /name:/ *string*, /login:/ *string*, /age:/ *integer*, /gpa/: *real*)

    Courses(/cid:/ *string*, /cname:/ *string*, /credits:/ *integer*)

    Rooms(/rno:/ *integer*, /address:/ *string*, /capacity:/ *integer*)

    Enrolled(/sid:/ *string*, /cid:/ *string*, /grade:/ *string*)

    Meets_In(/cid:/ *string*, /rno:/ *integer*, /time:/ *string*)
    #+end_quote

    Looking at the previous scheme we can identify that *Students*, *Courses*, and *Rooms* are entities while *Enrolled* and *Meets_In* are relationships between these entities. The way we can see this is that *Enrolled* and *Meets_In* reference field names from the entities, while entities do not reference any already defined field names. *Enrolled* references /sid/ from *Students* and /cid/ from *Courses*.

    #+begin_quote
    NOTE: This referencing is done implicitly. This is dependant on the project syntax and how the designing teams agree on the syntax. Some form of explicit referencing could be deployed all the same, or different entities could have the same field name while not referencing each other.
    #+end_quote

    Arriving at any conceptual design is done iteratively. This process is referred to as /conceptual database design/.

*** Physical Schema

    The physical schema describes how these relations are stored on the physical storage. This decides the file organisation and creates an auxiliary data structure, called *indexes*, to speed up data retrieval operations. Again, this is an iterative process called /physical database design/.

*** External Schema

    This schema describes how the data is displayed and to whom. This allows us to customise what data is displayed and who has access to which data. For any DBMS, there is /exactly/ one Conceptual Schema and one Physical Schema, but there can be any number of External Schema tailored to each particular user/user group.

    The external schema creates views for the users. A view is essentially a relation, except that it is not explicitly stored physically, but it references already existing relations(and entities) in some convenient format.

    An example from the preview schema would be:
    #+begin_quote
    Math_Course(/name:/ *String*, /grade:/)
    #+end_quote

    This would be used to view all the students in some mathematics course. Notice that some vital fields are missing, /sid/ and /cid/. There are passed to create the view, but they don't necessarily show up in the final view. This information would be considered irrelevant to some users. If we want to show the /sid/ of each student then we can. We can also show the /cid/, but since in this example we are looking at one course there is no point in doing so

** Data Independence

   In essence, this concepts dictates that are insulated from changes to the way the data is structured and stored. This means that for external schema views, if the conceptual schema changed, can undergo some definition change to produce the same result. That is, assuming that there has not been a fundamental change and the data is essentially reorganised.

   This allows us to create user specific views and hide data from the user(don't confuse this with information hiding in software development), such as income, personal data, etc. This is called *logical data independence*.

   This in turn shields the users from the physical schema as well, how is the data stored physically. This is called *physical data independence*.

* Introduction to Database design
  
  The purpose of a database is to store information about real life systems and represent them. In a relational database, there are two main concepts used to achieve this; entities and relationships.
** Entities
   Entities' purpose is to simulate actual real life objects. Consider a university. If we want to simulate using a relational database, we would use entities to represent students, professors, courses, etc. It is analogous to classes in OOP but not quite the same. As a rule of thump, if you are not sure what to use to represent something see if you would use a class to represent it.
   
   Entities have attributes. These attributes are data about these entities; a student can have 'name', 'id', and 'level', while a professor could have 'id', 'name', 'salary', etc. The attributes chosen for a specific entity will depend on the system and what the client wants to store about them.

   In an entity relations diagram, ER diagram, entities are represented using rectangles and attributes using ovals. Here is an example[fn:3].
   
   #+CAPTION: Entity with attributes example
   #+BEGIN_SRC dot :file img/DB3/entity_example.png
     graph G {
       student [shape=rectangle, label=Student];
       id [label=SID];
       name [label=Name];
       level [label=Level];
       student -- {id, name, level};
     }
   #+END_SRC

   Sometimes we want to identify each entity with some unique attribute. This is usually done is the form of 'ID', or some variant. This is represent by underlining the 'key' attributes. There could be multiple key attributes for the same entity. In this scenario the unique combination is what is used to identify each entity. This is called the /key set/.
   
   When assigning unique attribute(s) to an entity, no two different entities can have the same /key set/.
   
   #+CAPTION: Entity with a unique key
   #+BEGIN_SRC dot :file img/DB3/entity_key_example.png
     graph G {
       student [shape=rectangle, label=Student];
       id [label=<<u>SID</u>>];
       name [label=Name];
       level [label=Level];
       student -- {id, name, level};
     }
   #+END_SRC
   
** Relationships
   
   Having just entities is not enough to represent a system. We need to also describe how these entities interact with each other, or what is their 'relations'. Continuing with our university example, suppose we have courses and we want to show that a student takes a specific course or a set of courses. This is done through relationships. They are represented using diamonds in an ER diagram.

   #+CAPTION: Relationship example
   #+BEGIN_SRC dot :file img/DB3/relations_example.png
     graph G {
       enrolled [shape=diamond, label=Enrolled_In];

       student [shape=rectangle, label=Student];
       id [label=<<u>SID</u>>];
       name [label=Name];
       level [label=Level];
       student -- {id, name, level};

       course [shape=rectangle, label=Course];
       c_num [label=<<u>Course_Number</u>>];
       c_name [label=Name];
       cred [label=Credits];
       course -- {c_num, c_name, cred};

       enrolled -- {course, student};
     }
   #+END_SRC

   Relationships can also store information about the relation. For example, we can record when was the course last taken and what was grade of the student. This is done by adding attributes to the relation itself.
   
   #+CAPTION: Relationship with attributes
   #+BEGIN_SRC dot :file img/DB3/relations_attr_example.png
     graph G {
       rank=same;
       enrolled [shape=diamond, label=Enrolled_In];
       dt [label=Date_Taken];
       score [label=Grade];

       enrolled -- {dt, score};

       student [shape=rectangle, label=Student];
       id [label=<<u>SID</u>>];
       name [label=Name];
       level [label=Level];
       student -- {id, name, level};

       course [shape=rectangle, label=Course];
       c_num [label=<<u>Course_Number</u>>];
       c_name [label=Name];
       cred [label=Credits];
       course -- {c_num, c_name, cred};

       enrolled -- {student, course};
     }
   #+END_SRC
   
*** Constraints
    Sometimes you want to put constraints on relationships, like having that all students must be enrolled in a course or that each course must have exactly one instructor, if they have any. The first one is called a /participation constraint/ while the latter is called a /key constraint/.

**** Participation Constraint
     
     It basically means that *all* instances of an entity must participate in the relation. It is represented by *bold* line connecting the affected entity with the relation.
     
     #+CAPTION: Participation constraint example
     #+BEGIN_SRC dot :file img/DB3/part_const_example.png

       graph G {
         rank=same;
         enrolled [shape=diamond, label=Enrolled_In];
         dt [label=Date_Taken];
         score [label=Grade];

         enrolled -- {dt, score};

         student [shape=rectangle, label=Student];
         id [label=<<u>SID</u>>];
         name [label=Name];
         level [label=Level];
         student -- {id, name, level};

         course [shape=rectangle, label=Course];
         c_num [label=<<u>Course_Number</u>>];
         c_name [label=Name];
         cred [label=Credits];
         course -- {c_num, c_name, cred};

         enrolled -- course;
         enrolled -- student [style=bold, penwidth=3.5];
       }
     #+END_SRC

**** Key Constraint
     
     This indicates that each instance of an entity can participate in a relationship *only once*.
     
     #+CAPTION: Teaches relationship
     #+BEGIN_SRC dot :file img/DB3/key_const_example.png
       graph G {
         teaches [shape=diamond, label=Teaches];

         prof [shape=rectangle, label=Instructor];
         p_id [label=<<u>ID</u>>];
         p_name [label=Name];
         prof -- {p_id, p_name};

         course [shape=rectangle, label=Course];
         c_num [label=<<u>Course_Number</u>>];
         c_name [label=Name];
         cred [label=Credits];
         course -- {c_num, c_name, cred};

         teaches -- prof;
         teaches -- course [arrowhead=none, arrowtail=normal, dir=both];
       }
     #+END_SRC

     This diagram can be improved for better representation, but I am just keeping it simple for the example.
     
*** More than two in a relation
    So far we looked at relations where only two entities are participating. But that doesn't mean that more entities couldn't participate in the same relation, they definitely could! But we prefer as little participants as possible in a single relation to maintain simplicity and maintainability. Usually if you have more than three entities in the same relation it means that it could be simpler and you're doing it wrong. But it depends entirely on the rules you want to preserve and portray.

*** Aggregation
    If you find yourself with three or more entities in a single relation, try to consider /aggregation/. This is basically relations over relations. /\*insert meme here\*/.

    They are represented as such in an ER diagram:
    #+CAPTION: Aggregation example
    #+BEGIN_SRC dot :file img/DB3/aggr_example.png
      graph G {
        compound=true;
        teaches [shape=diamond, label=Teaches];
        supervises [shape=diamond, label=Supervises];

        superv [shape=rectangle, label=Supervisor];
        s_id [label=<<u>ID</u>>];
        s_name [label=Name];
        superv -- {s_id, s_name};

        prof [shape=rectangle, label=Instructor];
        p_id [label=<<u>ID</u>>];
        p_name [label=Name];

        course [shape=rectangle, label=Course];
        c_num [label=<<u>Course_Number</u>>];
        c_name [label=Name];
        cred [label=Credits];

        supervises -- superv;
        supervises -- teaches [lhead=cluster_teaches];

        subgraph cluster_teaches {
          style=dashed;
          prof -- {p_id, p_name};
          course -- {c_num, c_name, cred};
          teaches -- prof;
          teaches -- course [arrowhead=none, arrowtail=normal, dir=both];
      }
      }
    #+END_SRC
     
*** Weak entities
    Sometimes we want to store information that are relevant to a specific instant of an entity. For example, the university might want to your address and contact information. But there would no point in keeping this information after you left the and it would be quite useless to give them a key set since they are unique to you! Here is where /weak entities/ come to play. They are entities that are identified by another entity which it is related to. They are identified by their related entity and /maybe/ their own key, since you might have a few addresses so we want to identify each one separately.
    
    In an ER diagram they appear similar to a normal entity by but they drawn in bold and their relation as well. As such:

    #+CAPTION: Weak Entity example
    #+BEGIN_SRC dot :file img/DB3/weak_ent_example.png
      graph G {
        student [shape=rectangle, label=Student];
        id [label=SID];
        name [label=Name];
        level [label=Level];
        student -- {id, name, level};

        address [shape=rectangle, label=Address, penwidth=3.5];
        p_code [label=<<u>Postal Code</u>>];
        st_name [label="Street Name"];
        city [label=City];
        prov [label=Province];
        address -- {p_code, st_name, city, prov};

        addresses [shape=diamond, label=Addresses, penwidth=3.5];
        addresses -- address [penwidth=3.5, dir=both, arrowhead=none];
        addresses -- student;
      }
    #+END_SRC
    
    This has the added benefit of being able to store information about the relation. While it is not necessarily useful here, it can be  vital in other scenarios. So it is best to keep it in the tool belt

** Class Hierarchy
    You ever heard classes and sub classes in OOP? Well, this is basically it but for databases! Sub classes inherit attributes from their parent class and they can be treated like their parent class. This is usually used when multiple entities share a common set of attributes or if you have different kinds of the same entities, like employees. It is represented as a *ISA* triangle connecting bellow the parent and above the children. As such:
    
    #+CAPTION: *ISA* classes hierarchy example
    #+BEGIN_SRC dot :file img/DB3/isa_example.png
      graph G {
        employee [shape=rectangle, label=Employee];
        ssn [label=<<u>SSN</u>>];
        name [label=Name];
        employee -- {ssn, name};

        h_employee [shape=rectangle, label=Hourly_Employee];
        h_wage [label=hourly_wage];
        h_hours [label=hours_worked];
        h_employee -- {h_wage, h_hours};

        c_employee [shape=rectangle, label=Contracted_Employee];
        c_id [label=contract_id];
        c_employee -- c_id;

        em_isa [label=ISA, shape=triangle];
        employee:s -- em_isa:n ;
        em_isa:s -- {c_employee:n, h_employee:n};
      }
    #+END_SRC
    
    For class hierarchies we might want to define some constraints. Those are /covering constraint/ and /overlapping constraint/. The first dictates whether or not sub classes *must* cover the entire parent class, i.e every instance of the parent class must be part of at least one sub class. The latter dictates whether or not sub classes can overlap. These depend on the system being represented. They have no representation in the ER diagram but are included as notes and annotations for the diagram. In absence of a /covering constraint/ we assume that there isn't any and the sub classes don't have to cover the parent. For /overlapping constraint/ we assume that sub classes *cannot* overlap.
* TODO The Relation Model
* Relational Algebra
** TODO Selection and Projection
** TODO Set Operations
** TODO Renaming
** Joins
   Joins are rather useful in relational algebra and is one of the most common ways to combine information from two or more relations.

   It can be technically be defined as cross product followed by selection then projection, but they are used far more than the regular cross product(this sequence is used so often it gets its own function!). Add to it the fact that cross product's results are far larger than any join, so it is very important that the implementation doesn't involve the cross product. This is done by applying selection and projection 'on the fly'. Hence all the love for joins.

   There are multiple varieties for join operations.

*** Conditional Joins
    This is the most general form of join. It takes a /join condition/, /c/, and a pair of relations as arguments and returns a new relation. This can be defined using a selection and a cross product as follows:

    $R ⋈_c S = σ_c (R×S)$ 
    
    Note the /c/ can, and usually does, refer to attributes of /R/ and /S/. The reference can be in the form of position or name, /R.4/ or /R.field_Name/.

*** Equijoin
    
    This is a special form of the previous join. In an Equijoin, we match equal fields. Something like this:

    $S⋈_{R.sid=S.id}R$     /Sometimes written as/ $S⋈_{sid}R$
    
    Notice that we are comparing the field on both relations. This has the side effect of unnamed fields in the final relation, since we don't know to which relation /sid/ belongs to.
*** Natural Join
    
    A natural join is a more extreme form of equijoin, equality is specified on /all/ fields with same name on /R/ and /S/. In this case, we write it as such:

    $S⋈R$
    
    Notice that it doesn't have condition specified. The equalities are implicit. Since there are so much of them, we don't bother writing them all down.
** Division
   
   The division operator is most useful for queries such as “Find all the students who enrolled in all the courses.” Knowing what it does exactly and how to define it using other operators is a useful exercise, but not necessary. Not as popular as the other operators. In fact, most DBMS don't even bother implementing it as a distinct method but leaves the user to rely on other operators to achieve the same result, unlike the join operator.

   So bear with me for a second, I need to go abstract for a bit. Imagine we have two relations, /A/ and /B/. Let /A/ have the fields /x/ and /y/ and /B/ have just /y/, which have the same domain as in /A/. $A ∈ ⟨x, y⟩$ and $B ∈ ⟨y⟩. Following so far? A division $A/B$ would be set of all /x/ values such that for *every* /y/ value in /B/ there is a tuple $⟨x, y⟩$ in /A/. $∀ y ∈ B ∙ (∃ x ∙ ⟨x, y⟩ ∈ A)$ this gives us the 𝑥s that satisfy this property. If you need to take your time or go for a walk to understand this feel free to.
   
   Division can be defined as:

   $π_x((π_x(A) × B)-A)$

 For examples regarding relation algebra see the book.
* Queries, Programming, Triggers
  
  Queries are what allows us to manipulate the Database, whether it be the stored data or the database structure itself. SQL is the most common language for database queries and is the focus of the book.
  
  We will be using the following table definition in our examples for SQL statements:
  
  #+BEGIN_QUOTE:
  Sailors(_/sid:/ *integer*_, /sname:/ *string*, /rating:/ *integer*, /age:/ *real*)
  
  Boats(_/bid:/ *integer*_, /bname:/ *string*, /color:/ *string*)

  Reserves(_/sid:/ *integer*, /bid:/ *integer*, /day:/ *date*_)
  #+END_QUOTE:
  
  The tables related to these deviations can be found [[http://pages.cs.wisc.edu/~dbbook/openAccess/thirdEdition/exercise_data/all_tables.zip][here]] as a zip file.

**  Basic Query Form

   Each /query/ has the following generic for:

   #+BEGIN_EXAMPLE
     SELECT [ DESTINCT ] select-list
       FROM from-list
      WHERE conditions;
  #+END_EXAMPLE

  Fist is the ~SELECT~ statement, which identifies it as a query, followed by the list of columns/fields to be retained or showed in the results. Next is the ~FROM~ keyword, which specifies a cross product of tables. Or more simply, followed by the list of tables to run the query on. Lastly is the optional ~WHERE~, where you can specify conditions on the selection.
  
  Such query can be easily represented in relational algebra.

  :TODO: Add algebra examples.
  
  Here is an example of a simple query.
  #+CAPTION: Find the names and ages of all the sailors.
  #+LABEL: Q:selectSailors
  #+BEGIN_SRC sql
    SELECT DISTINCT S.sname, S.age
      FROM Sailors S;
  #+END_SRC

  The result is a set of rows containing the fields /S.sname/ and /S.age/. If more than one sailor have the same name and age, the entry will only appear once. This is due to the ~DISTINCT~ keyword; if omitted we will get duplicate entries. Since there are no conditions, this is equivalent to the projection, /π/, operation in relational algebra.

  Another example:
  
  #+CAPTION: Find all the sailors with a rating higher than 7
  #+LABEL: Q:querSelSRating7
  #+BEGIN_SRC sql
    SELECT S.sid, S.sname, S.rating, S.age
      FROM Sailors AS S
     WHERE S.rating > 7;
  #+END_SRC
  
  This query uses the optional keyword ~AS~  which acts like a projection, $ρ$.
 
  When evaluating a query, SQL evaluates it in the following order:
 
  1. Compute the cross product of the tables in the *from-list*
  2. Delete rows in the cross product that fail the *CONDITION*
  3. Delete all columns not in *select-list*
  4. If ~DISTINCT~ is specified, eliminate duplicate rows
  
     
  This is basic recipe for SQL evaluation, but usually is inefficient. A DBMS doesn't usually evaluate as stated. But that discussion will probably come at a later date.

  #+begin_center
  More examples of queries can be found in the book.
  #+end_center
*** Expressions and Strings in the ~SELECT~ Statement

   Consider the following query:

   #+LABEL: Q:exprAndString
   #+BEGIN_SRC sql
     SELECT S.sname, S.rating+1 AS rating, R.day
       FROM Sailors S, Reserves R
      WHERE S.name LIKE 'John%';
   #+END_SRC

   We can see that in the *column-list* we have a mathematical expression and the use of ~AS~. SQL allows for expressions on column names or constants. It follows this structure: ~expression AS new_name~, where ~expession~ is any expression as described and ~new_name~ is the column name for the computed data. ~AS~ here serves as a projection, $ρ$. In this example we add 1 to the rating of all the sailors in the query and name the results *rating*.
   
   In the ~WHERE~ part of the statement we are comparing strings. For strings we can use the ~LIKE~ keyword when we want to use some wildcard, i.e we give part of the string the query will match it. Wildcards in SQL are ~%~ analogous to ~*~ in regex, and ~_~ which matches any one character.
*** Set Operations
    
    When evaluating queries we can make of use some set operations, such as /Union/, /Intersect/, and /Except/, or /set difference/. These operations match their definitions in Set theory.

    * Union format
      #+begin_quote
        QUERY_{0}
        
        /UNION/
        
        ...
        
        /UNION/
        
        QUERY_{n}
      #+end_quote
      
    * Intersect
      
      #+begin_quote
        QUERY_{0}
        
        /INTERSECT/
        
        ...
        
        /INTERSECT/
        
        QUERY_{n}
      #+end_quote

    * Set Difference (/Except/)

      #+begin_quote
        QUERY_{0}
        
        /EXCEPT/
        
        ...
        
        /EXCEPT/
        
        QUERY_{n}
      #+end_quote
      
*** Nested Query

    Since queries simply return a set of rows and their input is a set of rows, we can chain them. Or more accurately, /nest/ queries inside of queries. The nested queries can appear in the ~FROM~, ~HAVING~ (to be discussed later), or the ~WHERE~ clauses.
    
    We will be looking into the ~WHERE~ clause for now. To compare a condition using set queries we use the following keywords:

    * ~IN~ and ~NOT IN~

      This is analogous to the $∈$ and $∉$ operations.

    * ~EXISTS~

      As far as I can tell, this is exactly like ~IN~. Except for the fact that the query has to be reevaluated for each entry on the parent query.

    * ~ANY~
      
      This is usually used to compare the data to all the rows in the nested query. Returns true if there is at least one case where the condition holds. Analogous to $∃$.

      #+CAPTION: ~ANY~ example
      #+begin_src sql
        SELECT S.sid
          FROM Sailors S
         WHERE S.age > ANY (SELECT S2.age
                              FROM Sailors S2
                             WHERE S2.name Like 'Bob%')
      #+end_src
      
      This query return the id of all sailors who are older than any sailor whose name begins with 'Bob'.

    * ~ALL~

      Similar to ~ANY~ but the condition has to be met with all the returned rows in the nested query. Analogous to $∀$.

    * ~UNIQUE~

      Similar to ~EXISTS~, but instead of returning the set on entries it returns true or false. Based on whether there are duplicate entries in the sub-query.

**** ~INTERSECTION~ Using ~IN~

     We can write intersection using ~IN~, ~NOT IN~, ~NOT EXISTS~, or ~NOT UNIQUE~.

*** Aggregate Operations
    * ~COUNT( [DISTINCT] A)~
      Counts the number of rows in ~A~, where ~A~ can be a list of columns or just one columns. Adding ~DISTINCT~ will count the /unique/ rows.
    * ~SUM( [DISTINCT] A)~
      Sums numerical entries in some columns.
    * ~AVG( [DISTINCT] A)~
      Returns the average of sum numerical column.
    * ~MIN(A)~ and ~MAX(A)~
      Return the minimum/maximum of some column(s).
      

    Something to note is that we cannot mix the aggregate operations with the column list. So something like the following is illegal:
    
    #+CAPTION: Illegal query
    #+LABEL: Q:AgrIllegal
    #+BEGIN_SRC sql
      SELECT S.snam, MAX(S.age)
        FROM Sailors S;
    #+END_SRC

    While this is legal:
    
    #+CAPTION: Legal Aggregation Query
    #+LABEL: Q:AgrLegal
     #+BEGIN_SRC sql
      SELECT S.snam, S.age
        FROM Sailors S
       WHERE S.age =
             (SELECT MAX(S2.age)
             FROM Sailors S2)
     #+END_SRC

     This query was used to get the oldest sailors in the database.
     
*** Grouping, ~GROUP BY~ and ~HAVING~
    There are some scenarios where we want to group the results based on 'qualification'. Like grouping students by year, or sailors by rating. This is allowed by the ~GROUP BY~ keyword. Its syntax is as follows:
    
    #+BEGIN_SRC sql
      SELECT target-list
        FROM relation-list
       WHERE qualification
       GROUP BY group-list
      HAVING group-qualification;
    #+END_SRC

    * The target list could be:
      * An aggregate operation,
      * or an attribute name
        * Attributes must be a subset of ~group-list~, i.e. they must appear in ~group-list~.
  
          
    The rest are self explanatory.

    A group are the set of tuples with the same values for all attributes in the ~group-list~.
    
    ~group-qualification~ can only contain attributes from the ~group-list~ or aggregate operations.
    
    This is evaluated as follows:
    1. The cross product is computed from ~relation-list~
    2. Tuples that fail ~qualification~ are discarded
    3. Tuples are grouped based on ~group-list~ as discussed earlier
    4. Groups that do not meet ~group-qualification~ are discarded.

** Null Value

   Some fields may have a null value. Meaning that they don't have a value. The behaviour of a null value in a field can be somewhat unpredictable. For starter, null does not equal any other value but itself. When using a null value in operation the behaviour is as follows:
   * In Boolean operations it can produce /unknown/ as a results
     * ~NOT null~ = ~unknown~
     * ~True OR null~ = ~True~
     * ~False OR null~ = ~unknown~
     * ~True AND null~ = ~unknown~
     * ~False AND null~ = ~False~
   * If a ~WHERE~ clause receives ~unknown~ it is terminated, essentially treated as ~False~
   * Any arithmetic operation will return unknown when given ~null~
   * All aggregation operations will not count ~null~ values, except for ~COUNT~.
   
     
   It is possible to prevent the ~null~ value in specific fields by adding ~NOT NULL~ to the field definition when creating the table, or adding after the fact by altering the table.
** Join
   There are three types of join.
*** Cross Join
    This simply performs Cartesian Product between the tables. Note that this is done implicitly when doing queries; recall ~FROM from-list~.
*** Inner Join
    Results in the matching rows from the Cartesian Product based on the join condition. Note, the following statements are equivalent.

    #+BEGIN_SRC sql
      SELECT *
        FROM Sailors JOIN Reserves
                         ON Sailors.sid = Reserves.sid;

      SELECT *
        FROM Sailors, Reserves
       WHERE Sailors.sid = Reserves.sid;
    #+END_SRC

*** Outer Join

    Outer Join gives the result of $A ∪ B$ after the Cartesian Product is calculated. When there are matching rows, like in /Inner Join/, they are displayed as expected. Where there are no matching rows, the entry is filled with null values. Depending on the query specification we can show only all of /A/, /B/, or both.

    As an example, if we have it to show all of /A/ and the matching field name is /id/. If there is a an entry in /A/ where the /id/ is not in /B/ the row in /A/ will be displayed while nulling the fields of /B/.

    You can choose between ~RIGHT~, ~LEFT~, or ~FULL~ Join when performing an outer join operation. The ~RIGHT~ will show all rows of the table on the right, ~LEFT~ will show all rows of the on the left, and ~FULL~ will show all the fields in both tables.
    
    Its syntax is as follows

    #+BEGIN_SRC sql
      SELECT select-list
        FROM table1 [NATURAL] (RIGHT/LEFT/JOIN) JOIN table2
                                          ON table1.field1 = table2.field2;
    #+END_SRC
    
    Using ~NATURAL~ will not require to add the ~ON~ statement, as it will automatically match matching field names.
** Constraints
*** Check
    Checks are made on fields in a given table to make sure that it applies to some validation rule. They are associated with a table and will be removed when said table is removed.
    
    Here is an exmaple:
    #+BEGIN_SRC sql
      CREATE TABLE Sailors(
        sid INTEGER,
        sname CHAR(10),
        rating  INTEGER,
        age  REAL,
        PRIMARY KEY (sid),
        CHECK( rating >= 1 AND rating <= 10 ));
    #+END_SRC
*** General Constraints

    Constraints can be named.
    #+BEGIN_SRC sql
      CREATE TABLE Sailors(
        sid INTEGER,
        sname CHAR(10),
        rating  INTEGER,
        age  REAL,
        PRIMARY KEY (sid),
        CONSTRAINT validRating CHECK( rating >= 1 AND rating <= 10 ));
    #+END_SRC

*** Assertion
    Assertions are made on tables to make sure that they follow some general rule. They are not associated with any table and will not be deleted on any table is deleted.
    #+BEGIN_SRC sql
      CREATE ASSERTION smallClub
        CHECK((SELECT COUNT (S.sid) FROMSailors S) +
              (SELECT COUNT (B.bid) FROMBoats B) < 100);
    #+END_SRC
    
** New Data Types and Domains
   
   SQL doesn't have the option to new data types as you would do in a programming language. Instead it can create aliases or 'sub types'. 

   Aliases are simply different names for the same type:

   #+BEGIN_SRC sql
     CREATE TYPE rating AS INTEGER;
   #+END_SRC

   Here we created a new alias for ~INTEGER~ can called it ~rating~.
   
   'Sub types' are defined as follows:

   #+BEGIN_SRC sql
     CREATE DOMAIN ratingType AS INTEGER
       DEFAULT 1 CHECK(VALUE >= 1 AND VALUE <= 10);
   #+END_SRC
   
   Notice the two new keywords, ~DEFAULT~ and ~CHECK~. Default serves to give the default value for the new 'sub type' while check serves to assert some constraint.

** Triggers
   Triggers are procedures that are called when specific changes to the database happen. It is divided into three parts:

   * Event
   * Condition
   * Action
   
     
   NOTE: Triggers do not serve as constraints. The conditions defined in triggers do not apply any form of assertion or constraint on any table. 

   This is the syntax of a trigger:

   #+BEGIN_SRC sql
     CREATE TRIGGER triggerName
       [BEFORE|AFTER|INSTEAD OF] [INSERT|UPDATE|DELETE] ON tableName
       WHEN condition
       <ACTION>;
   #+END_SRC

   #+begin_quote
   NOTE: It seems that ~INSTEAD OF~ is unique to DB2. It is best to consult the manual of the specific database when creating a trigger.
   #+end_quote
   
   The keywords or self explanatory.
   
   ~<ACTION>~ is some procedure to execute when the trigger is activated. The syntax of which should be referenced from the specific database manual, as it seems it is different from database to database.
   
   Here are some examples:
   #+BEGIN_SRC sql
     CREATE TRIGGER trig1
       BEFORE INSERT ON Sailors
       DECLARE
       count INTEGER
       BEGIN
         couunt :=0
       END;
   #+END_SRC
   
   This trigger declares a local variable ~count: INTEGER~ sets it to 0 and nothing else. This quite a useless trigger.
   
   #+BEGIN_SRC sql
     CREATE TRIGGER trig2
       AFTER INSERT ON Sailors
       WHEN (new.rating > 5)
       FOR EACH ROW
         BEGIN
           count := count +1
         END;
   #+END_SRC

   This trigger uses the defined ~count~ variable to count the number of sailors who have a rating ~>5~. The ~new~ keyword referees to all the new rows.
   
   Another example is as follows:
   #+BEGIN_SRC sql
     CREATE TRIGGER trig3
       AFTER INSERT ON Sailors
       REFERENCING NEW TABLE NewSailors
       FOR EACH STATEMENT
         INSERT INTO YoingSailors(sid)
         SELECT sid
         FROM NewSailors
         WHERE NewSailors.age <= 18;
   #+END_SRC

   Here we have two new sets of key words, ~REFERENCING NEW TABLE~ and ~FOR EACH STATEMENT~. The latter is self explanatory.

   ~REFERENCING NEW TABLE~ references the newly inserted rows as a table called /NewSailors/.
   

   The purpose of this trigger is to keep track of all the sailors who are 18 or younger.


* Links
#+CALL: ./code_snippets.org:get-brain-links()
* Footnotes

[fn:3] My diagrams are not coloured, the diagrams you will get have different colours for relations and entities. And they will be organised better.

[fn:2] I am assuming it is referencing the memory pages, not actual abstract pages.

[fn:1] Database Management System

#  LocalWords:  Equijoin equijoin
