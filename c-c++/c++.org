#+title: C++
#+author: Omar Alkersh
#+SETUPFILE: ../theme-readtheorg.setup

* Introduction

  This page is based of my own experience and Stroustrup's book [[http://www.stroustrup.com/4th.html]["C++ Programming Language (4th Edition)]]".

* Language basics

  It is statically typed; the type of every entity must be known to the compiler at compile time. There is no ambiguity about what the type of variable or the signature of any function.

  Stroustrup insists that C++ is a many paradigm language and we would be doing it injustice by calling it an OO language. To fully utilise C++ you need to understand that it has many paradigms that can be used simultaneously.

  C++ is a compiled language. The text file is taken and processed, producing object files, which are linked then yielding an executable.

* Hello, world!

  The minimal program is:

  #+BEGIN_SRC C++
    int main(){} // A function called "main" that takes no arguments.
  #+END_SRC

  All C++ programs must define exactly one global ~main()~ function. This is the entry point of the program. The ~int~ value returned is returned to the system. This is the exit code. A non-zero value is considered an error. Most system do something with the return value, =UNIX= based systems do while =Windows= usually doesn't.

  The ~main()~ function doesn't have to return any value. I believe ~return 0~ is implied.

  Most programs have some sort of output. To print to the screen you need to use ~cout~ which is the ~std~ namespace(will be discussed later). To call it you need to import the relevant library. Here is an example.

  #+NAME: helloWorld
  #+BEGIN_SRC C++ :results output verbatim
    #include <iostream>

    int main() {
      std::cout << "Hello, World.\n";
    }
  #+END_SRC

  If one was to put this program in a file and compile it then run it you will see the following output.

  #+call: helloWorld()

  Here ~#include <iostream>~ tells the compiler to /include/ the ~iostream~ library, which has the standard I/O stream facilities. The line:

  #+BEGIN_SRC C++
  std::cout << "Hello, World.\n";
  #+END_SRC

  would make no sense without it.

  The ~s << a~ operator is a *put to* operator. It inserts the second argument, ~a~, into the stream, ~s~, the precedes it. In this example we put the string ~"Hello, World.\n"~ into the standard output stream ~cout~.

  Strings will be look at later.

  The ~std::~ specifies that ~cout~ is found in the namespace ~std~, the standard library.

  In essence, all code is placed in functions and is called directly, or indirectly, from ~main()~.

* Variables and expressions
  
  In C++ there are 5 types of 'elementary' types; ~bool~, ~char~, ~int~, ~double~, and ~float~. They hold same values and behave similarly to other programming languages.

** Declaration and Initialisation
   
   To declare a variable you specify its type followed by an identifier, the name.

   #+BEGIN_SRC C++ 
     type varName;
   #+END_SRC

   Initialising a variable is to give it a value. In C++ this can be done in multiple different ways. You have the traditional method using '=' the *curly-braced-delimited initialiser list*. Both methods can be mixed.
   
   #+caption: = initialisaiton
   #+BEGIN_SRC C++
     int i = 5;
   #+END_SRC


   #+caption: Braces initialisaiton
   #+BEGIN_SRC C++
     int i {5};
   #+END_SRC

   #+caption: Mixed initialisaiton
   #+BEGIN_SRC C++
     int i = {5};
   #+END_SRC

   All the previous methods initialisation are equivalent.

** Arithmetic operations

   C++ comes with the usual mathematical operators;
   #+BEGIN_SRC C++
     x+y                             // plus
     +x                              // unary plus
     x-y                             // minus
     -x                              // unary minus
     x*y                             // multiply
     x/y                             //divide
     x%y                             // remainder/Modulus
#+END_SRC


* Read Also
#+CALL: ../code_snippets.org:get-list(ignore_pattern="c\\+\\+")
