#+NAME: get-list
#+BEGIN_SRC python :exports results :results value raw :var ignore_pattern="code_snippets.org"
  import re
  from fnmatch import fnmatch
  from os import listdir
  from os.path import isdir

  SIBLINGS = listdir('.')
  FILES = [f for f in SIBLINGS if fnmatch(f, '[!\.\*]*.org') and re.match(ignore_pattern, f) is None]
  DIRS = [f for f in SIBLINGS if isdir(f)]

  r = re.compile('.*#\+TITLE: (.*)', re.I)

  lists = ""
  for f in FILES:
      try:
          with open(f, 'r') as fr:
              lists += " - [[file:" + f + "][" + r.search(fr.read()).group(1) + "]]\n"
      except:
          pass

  for d in DIRS:
      f = d + "/" + d + ".org"
      try:
          with open(f, 'r') as fr:
              lists += " - [[file:" + f + "][" + r.search(fr.read()).group(1) + "]]\n"
      except:
          pass
  return lists
#+END_SRC


#+NAME: get-brain-links
#+BEGIN_SRC emacs-lisp :exports results :results raw
  (org-brain-switch-brain "~/projects/org-docs/")
  ;; (message org-brain-path)
  (org-brain-children (file-name-sans-extension (buffer-file-name)))
  (defun link (loction name)
    "Creates an org link from a `location` and a `name`'''"
    (concat " - "
            (concat "[[file:"
                    (concat entry
                            (concat ".org]["
                                    (concat title "]]\n")))))
    )
  (defun entry-to-link (entry)
    "Creates a link from an org brain entry"
    (let ((title (org-brain-title entry)))
      (link entry title )))

  (let ((doc-children (reduce #'concat (mapcar 'entry-to-link
                                               (org-brain-children (file-name-sans-extension (buffer-file-name))))))
        (doc-parents (reduce #'concat (mapcar 'entry-to-link
                                              (org-brain-parents (file-name-sans-extension (buffer-file-name))))))
        (doc-friends (reduce #'concat (mapcar 'entry-to-link
                                              (org-brain-friends (file-name-sans-extension (buffer-file-name)))))))
    (concat "** Children\n"
            (concat doc-children (concat "** Parents\n"
                                         (concat doc-parents (concat "** Friends\n"
                                                                     doc-friends))))))
#+END_SRC
